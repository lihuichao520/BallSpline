
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// [[-START_SUNXI_HEADER
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// - SUNXI -
//
// Real Time 3D Engine
// (C) SUNXI Team 1998/2002
//
// Any modification, use and/or distribution of this file
// in binary or source code format is strictly prohibited
// without the SunXiTeam's permission.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// _HEADER
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// - 3D Model -
//
// 
//
// Any modification, use and/or distribution of this file
// in binary or source code format is strictly prohibited
// without our group's permission.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Authors     : WU Zhongke
// Team        : Prof Seah's group
//
// File        : gvBallNurbsCurve.h
// Description : Ball Nurbs curve  
//
// Last UpDate :
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Comments :
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __GVTRIANGLEINDEP_H
  #define __GVTRIANGLEINDEP_H
#include "gvVector.h"

typedef struct gvXTriangleD
{
  // Triangle Xtend
  gvINT        a,b,c;    // Face indices
  gvPoint      nf;       // Face Normal
  gvPoint      na,nb,nc; // Vertex Normal
  
} gvXTriangle;

typedef struct gvTrianglesIndepD
{
  // Independents triangles
  gvINT       nbrv;    // Number of vertex
  gvINT       nbrf;    // Number of faces
  gvPoint     *v;       // Vertex
  gvXTriangle *f;       // Faces
  gvPoint2D *tc;    // Texture Coord
  // UVW Map Here
  // Volume control
  gvFLOAT      volnor;  // Volumetric normalize
  gvFLOAT      surfshd; // Surfacic shader
  gvFLOAT      smooth;  // Smoothing group value
  // PRIVATE            //
  gvINT        vlinks;  // Virtual links
} gvTrianglesIndep;


#ifdef __cplusplus
extern "C" {
#endif


gvXTriangle *gvNewStructXTriangle(gvINT  n,gvINT  init);
void         gvInitStructXTriangle(gvXTriangle *ptr,gvINT  n);
void         gvFreeStructXTriangle(gvXTriangle *ptr);

gvTrianglesIndep *gvNewStructTrianglesIndep(gvINT  n,gvINT  init);
void              gvInitStructTrianglesIndep(gvTrianglesIndep *ptr,gvINT  n);
void              gvFreeStructTrianglesIndep(gvTrianglesIndep *ti);

#ifdef __cplusplus
}
#endif

#endif // __GVTRIANGLEINDEP_H
